/*
This file is auto-generated by TLC machine learning toolkit (http://tlc/).
*/
using System;
using System.Collections.Generic;
using System.IO;
using Microsoft.MachineLearning;
using Microsoft.MachineLearning.Api;
using Microsoft.MachineLearning.Data;


namespace Microsoft.eShopOnContainers.Services.AI.SalesForecasting.MLNet.API.Forecasting
{
    public class ProductSample
    {
        public ProductSample(string productId, int year, int month, float units, float avg, int count, float max, float min, float prev,
            float price, string color, string size, string shape, string agram, string bgram, string ygram, string zgram)
        {
            this.Features = new Single[] { year, month, units, avg, count, max, min, prev, price };
            this.productId = productId;
            this.color = color;
            this.size = size;
            this.shape = shape;
            this.agram = agram;
            this.bgram = bgram;
            this.ygram = ygram;
            this.zgram = zgram;
        }

        public Single next;

        public string productId;

        [VectorType(9)]
        public Single[] Features = new Single[9];

        public string color;

        public string size;

        public string shape;

        public string agram;

        public string bgram;

        public string zgram;

        public string ygram;
    }

    /// <summary>
    /// This is the output of the scored model, the prediction.
    /// </summary>
    public class ScoredProductSample
    {
        // Below columns are produced by the model's predictor.
        public Single Score;
    }

    public class ProductSales : IProductSales
    {
        public ScoredProductSample Predict(string modelPath, string productId, int year, int month, float units, float avg, int count, float max, float min, float prev,
            float price, string color, string size, string shape, string agram, string bgram, string ygram, string zgram)
        {
            var env = new TlcEnvironment(conc: 1);

            var predictionEngine = CreatePredictionEngine(env, modelPath);

            var inputExample = new ProductSample(productId, year, month, units, avg, count, max, min, prev, price, color, size, shape, agram, bgram, ygram, zgram);

            ScoredProductSample score = predictionEngine.Predict(inputExample);
            return score;
        }

        /// <summary>
        /// This function creates a prediction engine from the model located in the <paramref name="modelPath"/>.
        /// </summary>
        private PredictionEngine<ProductSample, ScoredProductSample> CreatePredictionEngine(IHostEnvironment env, string modelPath)
        {
            using (var fs = File.OpenRead(modelPath))
                return env.CreatePredictionEngine<ProductSample, ScoredProductSample>(fs);
        }
    }
}
